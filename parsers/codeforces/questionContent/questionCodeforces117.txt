G. Prediction
time limit per test4 seconds
memory limit per test512 megabytes
inputstandard input
outputstandard output
Consider a tournament with
n
participants. The rating of the
i
-th participant is
a
i
.
The tournament will be organized as follows. First of all, organizers will assign each participant an index from
1
to
n
. All indices will be unique. Let
p
i
be the participant who gets the index
i
.
Then,
n−1
games will be held. In the first game, participants
p
1
and
p
2
will play. In the second game, the winner of the first game will play against
p
3
. In the third game, the winner of the second game will play against
p
4
, and so on — in the last game, the winner of the
(n−2)
-th game will play against
p
n
.
Monocarp wants to predict the results of all
n−1
games (of course, he will do the prediction only after the indices of the participants are assigned). He knows for sure that, when two participants with ratings
x
and
y
play, and
|x−y|>k
, the participant with the higher rating wins. But if
|x−y|≤k
, any of the two participants may win.
Among all
n!
ways to assign the indices to participants, calculate the number of ways to do this so that Monocarp can predict the results of all
n−1
games. Since the answer can be large, print it modulo
998244353
.
Input
The first line contains two integers
n
and
k
(
2≤n≤
10
6
;
0≤k≤
10
9
).
The second line contains
n
integers
a
1
,
a
2
,…,
a
n
(
0≤
a
1
≤
a
2
≤⋯≤
a
n
≤
10
9
).
Output
Print one integer — the number of ways to assign the indices to the participants so that Monocarp can predict the results of all
n−1
games.
Examples
input
Copy
4 3
7 12 17 21
output
Copy
24
input
Copy
3 7
4 9 28
output
Copy
4
input
Copy
4 1
1 2 3 4
output
Copy
0
input
Copy
4 1
1 2 2 4
output
Copy
12
input
Copy
16 30
8 12 15 27 39 44 49 50 51 53 58 58 59 67 68 100
output
Copy
527461297
Note
In the first example, a match with any pair of players can be predicted by Monocarp, so all
24
ways to assign indices should be counted.
In the second example, suitable ways are
[1,3,2]
,
[2,3,1]
,
[3,1,2
] and
[3,2,1]
.