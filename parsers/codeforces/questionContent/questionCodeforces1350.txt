A. Array Elimination
time limit per test2 seconds
memory limit per test512 megabytes
inputstandard input
outputstandard output
You are given array
a
1
,
a
2
,…,
a
n
, consisting of non-negative integers.
Let's define operation of "elimination" with integer parameter
k
(
1≤k≤n
) as follows:
Choose
k
distinct array indices
1≤
i
1
<
i
2
<…<
i
k
≤n
.
Calculate
x=
a
i
1
 & 
a
i
2
 & … & 
a
i
k
, where
&
denotes the bitwise AND operation (notes section contains formal definition).
Subtract
x
from each of
a
i
1
,
a
i
2
,…,
a
i
k
; all other elements remain untouched.
Find all possible values of
k
, such that it's possible to make all elements of array
a
equal to
0
using a finite number of elimination operations with parameter
k
. It can be proven that exists at least one possible
k
for any array
a
.
Note that you firstly choose
k
and only after that perform elimination operations with value
k
you've chosen initially.
Input
Each test contains multiple test cases. The first line contains the number of test cases
t
(
1≤t≤
10
4
). Description of the test cases follows.
The first line of each test case contains one integer
n
(
1≤n≤200000
) — the length of array
a
.
The second line of each test case contains
n
integers
a
1
,
a
2
,…,
a
n
(
0≤
a
i
<
2
30
) — array
a
itself.
It's guaranteed that the sum of
n
over all test cases doesn't exceed
200000
.
Output
For each test case, print all values
k
, such that it's possible to make all elements of
a
equal to
0
in a finite number of elimination operations with the given parameter
k
.
Print them in increasing order.
Example
input
Copy
5
4
4 4 4 4
4
13 7 25 19
6
3 5 3 1 7 1
1
1
5
0 0 0 0 0
output
Copy
1 2 4
1 2
1
1
1 2 3 4 5
Note
In the first test case:
If
k=1
, we can make four elimination operations with sets of indices
{1}
,
{2}
,
{3}
,
{4}
. Since
&
of one element is equal to the element itself, then for each operation
x=
a
i
, so
a
i
−x=
a
i
−
a
i
=0
.
If
k=2
, we can make two elimination operations with, for example, sets of indices
{1,3}
and
{2,4}
:
x=
a
1
 & 
a
3
=
a
2
 & 
a
4
=
4 & 4=4
. For both operations
x=4
, so after the first operation
a
1
−x=0
and
a
3
−x=0
, and after the second operation —
a
2
−x=0
and
a
4
−x=0
.
If
k=3
, it's impossible to make all
a
i
equal to
0
. After performing the first operation, we'll get three elements equal to
0
and one equal to
4
. After that, all elimination operations won't change anything, since at least one chosen element will always be equal to
0
.
If
k=4
, we can make one operation with set
{1,2,3,4}
, because
x=
a
1
 & 
a
2
 & 
a
3
 & 
a
4
=4
.
In the second test case, if
k=2
then we can make the following elimination operations:
Operation with indices
{1,3}
:
x=
a
1
 & 
a
3
=
13 & 25=9
.
a
1
−x=13−9=4
and
a
3
−x=25−9=16
. Array
a
will become equal to
[4,7,16,19]
.
Operation with indices
{3,4}
:
x=
a
3
 & 
a
4
=
16 & 19=16
.
a
3
−x=16−16=0
and
a
4
−x=19−16=3
. Array
a
will become equal to
[4,7,0,3]
.
Operation with indices
{2,4}
:
x=
a
2
 & 
a
4
=
7 & 3=3
.
a
2
−x=7−3=4
and
a
4
−x=3−3=0
. Array
a
will become equal to
[4,4,0,0]
.
Operation with indices
{1,2}
:
x=
a
1
 & 
a
2
=
4 & 4=4
.
a
1
−x=4−4=0
and
a
2
−x=4−4=0
. Array
a
will become equal to
[0,0,0,0]
.
Formal definition of bitwise AND:
Let's define bitwise AND (
&
) as follows. Suppose we have two non-negative integers
x
and
y
, let's look at their binary representations (possibly, with leading zeroes):
x
k
…
x
2
x
1
x
0
and
y
k
…
y
2
y
1
y
0
. Here,
x
i
is the
i
-th bit of number
x
, and
y
i
is the
i
-th bit of number
y
. Let
r=x & y
is a result of operation
&
on number
x
and
y
. Then binary representation of
r
will be
r
k
…
r
2
r
1
r
0
, where:
r
i
={
1, if 
x
i
=1 and 
y
i
=1
0, if 
x
i
=0 or 
y
i
=0