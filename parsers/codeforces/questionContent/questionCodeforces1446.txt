H. Higher Order Functions
time limit per test2 seconds
memory limit per test1024 megabytes
inputstandard input
outputstandard output
Helen studies functional programming and she is fascinated with a concept of higher order functions — functions that are taking other functions as parameters. She decides to generalize the concept of the function order and to test it on some examples.
For her study, she defines a simple grammar of types. In her grammar, a type non-terminal
T
is defined as one of the following grammar productions, together with
order(T)
, defining an order of the corresponding type:
"()" is a unit type,
order("()")=0
.
"("
T
")" is a parenthesized type,
order("("T")")=order(T)
.
T
1
"->"
T
2
is a functional type,
order(
T
1
"->"
T
2
)=max(order(
T
1
)+1,order(
T
2
))
. The function constructor
T
1
"->"
T
2
is right-to-left associative, so the type "()->()->()" is the same as the type "()->(()->())" of a function returning a function, and it has an order of
1
. While "(()->())->()" is a function that has an order-1 type "(()->())" as a parameter, and it has an order of
2
.
Helen asks for your help in writing a program that computes an order of the given type.
Input
The single line of the input contains a string consisting of characters '(', ')', '-', and '>' that describes a type that is valid according to the grammar from the problem statement. The length of the line is at most
10
4
characters.
Output
Print a single integer — the order of the given type.
Examples
input
Copy
()
output
Copy
0
input
Copy
()->()
output
Copy
1
input
Copy
()->()->()
output
Copy
1
input
Copy
(()->())->()
output
Copy
2
input
Copy
()->(((()->())->()->())->())
output
Copy
3