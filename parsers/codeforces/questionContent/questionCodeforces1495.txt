C. Jury Meeting
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
n
people gathered to hold a jury meeting of the upcoming competition, the
i
-th member of the jury came up with
a
i
tasks, which they want to share with each other.
First, the jury decides on the order which they will follow while describing the tasks. Let that be a permutation
p
of numbers from
1
to
n
(an array of size
n
where each integer from
1
to
n
occurs exactly once).
Then the discussion goes as follows:
If a jury member
p
1
has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.
If a jury member
p
2
has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.
...
If a jury member
p
n
has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped.
If there are still members with tasks left, then the process repeats from the start. Otherwise, the discussion ends.
A permutation
p
is nice if none of the jury members tell two or more of their own tasks in a row.
Count the number of nice permutations. The answer may be really large, so print it modulo
998244353
.
Input
The first line contains a single integer
t
(
1≤t≤
10
4
) — the number of test cases.
The first line of the test case contains a single integer
n
(
2≤n≤2⋅
10
5
) — number of jury members.
The second line contains
n
integers
a
1
,
a
2
,…,
a
n
(
1≤
a
i
≤
10
9
) — the number of problems that the
i
-th member of the jury came up with.
The sum of
n
over all test cases does not exceed
2⋅
10
5
.
Output
For each test case, print one integer — the number of nice permutations, taken modulo
998244353
.
Example
input
Copy
4
2
1 2
3
5 5 5
4
1 3 3 7
6
3 4 2 1 3 3
output
Copy
1
6
0
540
Note
Explanation of the first test case from the example:
There are two possible permutations,
p=[1,2]
and
p=[2,1]
. For
p=[1,2]
, the process is the following:
the first jury member tells a task;
the second jury member tells a task;
the first jury member doesn't have any tasks left to tell, so they are skipped;
the second jury member tells a task.
So, the second jury member has told two tasks in a row (in succession), so the permutation is not nice.
For
p=[2,1]
, the process is the following:
the second jury member tells a task;
the first jury member tells a task;
the second jury member tells a task.
So, this permutation is nice.