C. Rings
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Frodo was caught by Saruman. He tore a pouch from Frodo's neck, shook out its contents —there was a pile of different rings: gold and silver...
"How am I to tell which is the One?!" the mage howled.
"Throw them one by one into the Cracks of Doom and watch when Mordor falls!"
Somewhere in a parallel Middle-earth, when Saruman caught Frodo, he only found
n
rings. And the
i
-th ring was either gold or silver. For convenience Saruman wrote down a binary string
s
of
n
characters, where the
i
-th character was 0 if the
i
-th ring was gold, and 1 if it was silver.
Saruman has a magic function
f
, which takes a binary string and returns a number obtained by converting the string into a binary number and then converting the binary number into a decimal number. For example,
f(001010)=10,f(111)=7,f(11011101)=221
.
Saruman, however, thinks that the order of the rings plays some important role. He wants to find
2
pairs of integers
(
l
1
,
r
1
),(
l
2
,
r
2
)
, such that:
1≤
l
1
≤n
,
1≤
r
1
≤n
,
r
1
−
l
1
+1≥⌊
n
2
⌋
1≤
l
2
≤n
,
1≤
r
2
≤n
,
r
2
−
l
2
+1≥⌊
n
2
⌋
Pairs
(
l
1
,
r
1
)
and
(
l
2
,
r
2
)
are distinct. That is, at least one of
l
1
≠
l
2
and
r
1
≠
r
2
must hold.
Let
t
be the substring
s[
l
1
:
r
1
]
of
s
, and
w
be the substring
s[
l
2
:
r
2
]
of
s
. Then there exists non-negative integer
k
, such that
f(t)=f(w)⋅k
.
Here substring
s[l:r]
denotes
s
l
s
l+1
…
s
r−1
s
r
, and
⌊x⌋
denotes rounding the number down to the nearest integer.
Help Saruman solve this problem! It is guaranteed that under the constraints of the problem at least one solution exists.
Input
Each test contains multiple test cases.
The first line contains one positive integer
t
(
1≤t≤
10
3
), denoting the number of test cases. Description of the test cases follows.
The first line of each test case contains one positive integer
n
(
2≤n≤2⋅
10
4
) — length of the string.
The second line of each test case contains a non-empty binary string of length
n
.
It is guaranteed that the sum of
n
over all test cases does not exceed
10
5
.
Output
For every test case print four integers
l
1
,
r
1
,
l
2
,
r
2
, which denote the beginning of the first substring, the end of the first substring, the beginning of the second substring, and the end of the second substring, respectively.
If there are multiple solutions, print any.
Example
input
Copy
7
6
101111
9
111000111
8
10000000
5
11011
6
001111
3
101
30
100000000000000100000000000000
output
Copy
3 6 1 3
1 9 4 9
5 8 1 4
1 5 3 5
1 6 2 4
1 2 2 3
1 15 16 30
Note
In the first testcase
f(t)=f(1111)=15
,
f(w)=f(101)=5
.
In the second testcase
f(t)=f(111000111)=455
,
f(w)=f(000111)=7
.
In the third testcase
f(t)=f(0000)=0
,
f(w)=f(1000)=8
.
In the fourth testcase
f(t)=f(11011)=27
,
f(w)=f(011)=3
.
In the fifth testcase
f(t)=f(001111)=15
,
f(w)=f(011)=3
.