C. Manhattan Subarrays
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
Suppose you have two points
p=(
x
p
,
y
p
)
and
q=(
x
q
,
y
q
)
. Let's denote the Manhattan distance between them as
d(p,q)=|
x
p
−
x
q
|+|
y
p
−
y
q
|
.
Let's say that three points
p
,
q
,
r
form a bad triple if
d(p,r)=d(p,q)+d(q,r)
.
Let's say that an array
b
1
,
b
2
,…,
b
m
is good if it is impossible to choose three distinct indices
i
,
j
,
k
such that the points
(
b
i
,i)
,
(
b
j
,j)
and
(
b
k
,k)
form a bad triple.
You are given an array
a
1
,
a
2
,…,
a
n
. Calculate the number of good subarrays of
a
. A subarray of the array
a
is the array
a
l
,
a
l+1
,…,
a
r
for some
1≤l≤r≤n
.
Note that, according to the definition, subarrays of length
1
and
2
are good.
Input
The first line contains one integer
t
(
1≤t≤5000
) — the number of test cases.
The first line of each test case contains one integer
n
(
1≤n≤2⋅
10
5
) — the length of array
a
.
The second line of each test case contains
n
integers
a
1
,
a
2
,…,
a
n
(
1≤
a
i
≤
10
9
).
It's guaranteed that the sum of
n
doesn't exceed
2⋅
10
5
.
Output
For each test case, print the number of good subarrays of array
a
.
Example
input
Copy
3
4
2 4 1 3
5
6 9 1 9 6
2
13 37
output
Copy
10
12
3
Note
In the first test case, it can be proven that any subarray of
a
is good. For example, subarray
[
a
2
,
a
3
,
a
4
]
is good since it contains only three elements and:
d((
a
2
,2),(
a
4
,4))=|4−3|+|2−4|=3
<
d((
a
2
,2),(
a
3
,3))+d((
a
3
,3),(
a
4
,4))=3+1+2+1=7
;
d((
a
2
,2),(
a
3
,3))
<
d((
a
2
,2),(
a
4
,4))+d((
a
4
,4),(
a
3
,3))
;
d((
a
3
,3),(
a
4
,4))
<
d((
a
3
,3),(
a
2
,2))+d((
a
2
,2),(
a
4
,4))
;
In the second test case, for example, subarray
[
a
1
,
a
2
,
a
3
,
a
4
]
is not good, since it contains a bad triple
(
a
1
,1)
,
(
a
2
,2)
,
(
a
4
,4)
:
d((
a
1
,1),(
a
4
,4))=|6−9|+|1−4|=6
;
d((
a
1
,1),(
a
2
,2))=|6−9|+|1−2|=4
;
d((
a
2
,2),(
a
4
,4))=|9−9|+|2−4|=2
;
So,
d((
a
1
,1),(
a
4
,4))=d((
a
1
,1),(
a
2
,2))+d((
a
2
,2),(
a
4
,4))
.