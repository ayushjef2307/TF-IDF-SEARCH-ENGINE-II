C. Nastia and a Hidden Permutation
time limit per test3 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
This is an interactive problem!
Nastia has a hidden permutation
p
of length
n
consisting of integers from
1
to
n
. You, for some reason, want to figure out the permutation. To do that, you can give her an integer
t
(
1≤t≤2
), two different indices
i
and
j
(
1≤i,j≤n
,
i≠j
), and an integer
x
(
1≤x≤n−1
).
Depending on
t
, she will answer:
t=1
:
max(min(x,
p
i
),min(x+1,
p
j
))
;
t=2
:
min(max(x,
p
i
),max(x+1,
p
j
))
.
You can ask Nastia at most
⌊
3⋅n
2
⌋+30
times. It is guaranteed that she will not change her permutation depending on your queries. Can you guess the permutation?
Input
The input consists of several test cases. In the beginning, you receive the integer
T
(
1≤T≤10000
) — the number of test cases.
At the beginning of each test case, you receive an integer
n
(
3≤n≤
10
4
) — the length of the permutation
p
.
It's guaranteed that the permutation is fixed beforehand and that the sum of
n
in one test doesn't exceed
2⋅
10
4
.
Interaction
To ask a question, print "?
t
i
j
x
" (
t=1
or
t=2
,
1≤i,j≤n
,
i≠j
,
1≤x≤n−1
) Then, you should read the answer.
If we answer with
−1
instead of a valid answer, that means you exceeded the number of queries or made an invalid query. Exit immediately after receiving
−1
and you will see the Wrong Answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.
To print the answer, print "!
p
1
p
2
…
p
n
(without quotes). Note that answering doesn't count as one of the
⌊
3⋅n
2
⌋+30
queries.
After printing a query or printing the answer, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:
fflush(stdout) or cout.flush() in C++;
System.out.flush() in Java;
flush(output) in Pascal;
stdout.flush() in Python;
See the documentation for other languages.
Hacks
To hack the solution, use the following test format.
The first line should contain a single integer
T
(
1≤T≤10000
) — the number of test cases.
For each test case in the first line print a single integer
n
(
3≤n≤
10
4
) — the length of the hidden permutation
p
.
In the second line print
n
space-separated integers
p
1
,
p
2
,…,
p
n
(
1≤
p
i
≤n
), where
p
is permutation.
Note that the sum of
n
over all test cases should not exceed
2⋅
10
4
.
Example
input
Copy
2
4

3

2

5

3
output
Copy
? 2 4 1 3

? 1 2 4 2

! 3 1 4 2

? 2 3 4 2

! 2 5 3 4 1
Note
Consider the first test case.
The hidden permutation is
[3,1,4,2]
.
We print: "?
2
4
1
3
" and get back
min(max(3,
p
4
),max(4,
p
1
))=3
.
We print: "?
1
2
4
2
" and get back
max(min(2,
p
2
),min(3,
p
4
))=2
.
Consider the second test case.
The hidden permutation is
[2,5,3,4,1]
.
We print: "?
2
3
4
2
" and get back
min(max(2,
p
3
),max(3,
p
4
))=3
.