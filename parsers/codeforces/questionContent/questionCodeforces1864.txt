G. Graph Coloring
time limit per test7 seconds
memory limit per test1024 megabytes
inputstandard input
outputstandard output
You are given a bipartite graph consisting of
n
1
vertices in the first part,
n
2
vertices in the second part, and
m
edges, numbered from
1
to
m
. You have to color each edge into one of two colors, red and blue. You have to minimize the following value:
∑
v∈V
|r(v)−b(v)|
, where
V
is the set of vertices of the graph,
r(v)
is the number of red edges incident to
v
, and
b(v)
is the number of blue edges incident to
v
.
Sounds classical and easy, right? Well, you have to process
q
queries of the following format:
1
v
1
v
2
— add a new edge connecting the vertex
v
1
of the first part with the vertex
v
2
of the second part. This edge gets a new index as follows: the first added edge gets the index
m+1
, the second —
m+2
, and so on. After adding the edge, you have to print the hash of the current optimal coloring (if there are multiple optimal colorings, print the hash of any of them). Actually, this hash won't be verified, you may print any number as the answer to this query, but you may be asked to produce the coloring having this hash;
2
— print the optimal coloring of the graph with the same hash you printed while processing the previous query. The query of this type will only be asked after a query of type
1
, and there will be at most
10
queries of this type. If there are multiple optimal colorings corresponding to this hash, print any of them.
Note that if an edge was red or blue in some coloring, it may change its color in next colorings.
The hash of the coloring is calculated as follows: let
R
be the set of indices of red edges, then the hash is
(
∑
i∈R
2
i
)mod998244353
.
Note that you should solve the problem in online mode. It means that you can't read the whole input at once. You can read each query only after writing the answer for the last query. Use functions fflush in C++ and BufferedWriter.flush in Java languages after each writing in your program.
Input
The first line contains three integers
n
1
,
n
2
and
m
(
1≤
n
1
,
n
2
,m≤2⋅
10
5
).
Then
m
lines follow, the
i
-th of them contains two integers
x
i
and
y
i
(
1≤
x
i
≤
n
1
;
1≤
y
i
≤
n
2
) meaning that the
i
-th edge connects the vertex
x
i
from the first part and the vertex
y
i
from the second part.
The next line contains one integer
q
(
1≤q≤2⋅
10
5
) — the number of queries you have to process.
The next
q
lines contain the queries in the format introduced in the statement.
Additional constraints on the input:
at any moment, the graph won't contain any multiple edges;
the queries of type
2
are only asked if the previous query had type
1
;
there are at most
10
queries of type
2
.
Output
To answer a query of type
1
, print one integer — the hash of the optimal coloring.
To answer a query of type
2
, print one line. It should begin with the integer
k
 — the number of red edges. Then,
k
distinct integer should follow — the indices of red edges in your coloring, in any order. Each index should correspond to an existing edge, and the hash of the coloring you produce should be equal to the hash you printed as the answer to the previous query.
If there are multiple answers to a query, you may print any of them.
Example
input
Copy
3 4 2
1 2
3 4
10
1 1 3
1 2 3
2
1 3 3
2
1 2 4
2
1 2 1
1 1 1
2
output
Copy
8
8
1 3
40
2 3 5
104
3 5 6 3
104
360
4 5 6 3 8