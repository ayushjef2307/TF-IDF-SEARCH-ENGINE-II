D. Cleaning the Phone
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Polycarp often uses his smartphone. He has already installed
n
applications on it. Application with number
i
takes up
a
i
units of memory.
Polycarp wants to free at least
m
units of memory (by removing some applications).
Of course, some applications are more important to Polycarp than others. He came up with the following scoring system — he assigned an integer
b
i
to each application:
b
i
=1
 — regular application;
b
i
=2
 — important application.
According to this rating system, his phone has
b
1
+
b
2
+…+
b
n
convenience points.
Polycarp believes that if he removes applications with numbers
i
1
,
i
2
,…,
i
k
, then he will free
a
i
1
+
a
i
2
+…+
a
i
k
units of memory and lose
b
i
1
+
b
i
2
+…+
b
i
k
convenience points.
For example, if
n=5
,
m=7
,
a=[5,3,2,1,4]
,
b=[2,1,1,2,1]
, then Polycarp can uninstall the following application sets (not all options are listed below):
applications with numbers
1,4
and
5
. In this case, it will free
a
1
+
a
4
+
a
5
=10
units of memory and lose
b
1
+
b
4
+
b
5
=5
convenience points;
applications with numbers
1
and
3
. In this case, it will free
a
1
+
a
3
=7
units of memory and lose
b
1
+
b
3
=3
convenience points.
applications with numbers
2
and
5
. In this case, it will free
a
2
+
a
5
=7
memory units and lose
b
2
+
b
5
=2
convenience points.
Help Polycarp, choose a set of applications, such that if removing them will free at least
m
units of memory and lose the minimum number of convenience points, or indicate that such a set does not exist.
Input
The first line contains one integer
t
(
1≤t≤
10
4
) — the number of test cases. Then
t
test cases follow.
The first line of each test case contains two integers
n
and
m
(
1≤n≤2⋅
10
5
,
1≤m≤
10
9
) — the number of applications on Polycarp's phone and the number of memory units to be freed.
The second line of each test case contains
n
integers
a
1
,
a
2
,…,
a
n
(
1≤
a
i
≤
10
9
) — the number of memory units used by applications.
The third line of each test case contains
n
integers
b
1
,
b
2
,…,
b
n
(
1≤
b
i
≤2
) — the convenience points of each application.
It is guaranteed that the sum of
n
over all test cases does not exceed
2⋅
10
5
.
Output
For each test case, output on a separate line:
-1, if there is no set of applications, removing which will free at least
m
units of memory;
the minimum number of convenience points that Polycarp will lose if such a set exists.
Example
input
Copy
5
5 7
5 3 2 1 4
2 1 1 2 1
1 3
2
1
5 10
2 3 2 3 2
1 2 1 2 1
4 10
5 1 3 4
1 2 1 2
4 5
3 2 1 2
2 1 2 1
output
Copy
2
-1
6
4
3
Note
In the first test case, it is optimal to remove applications with numbers
2
and
5
, freeing
7
units of memory.
b
2
+
b
5
=2
.
In the second test case, by removing the only application, Polycarp will be able to clear only
2
of memory units out of the
3
needed.
In the third test case, it is optimal to remove applications with numbers
1
,
2
,
3
and
4
, freeing
10
units of memory.
b
1
+
b
2
+
b
3
+
b
4
=6
.
In the fourth test case, it is optimal to remove applications with numbers
1
,
3
and
4
, freeing
12
units of memory.
b
1
+
b
3
+
b
4
=4
.
In the fifth test case, it is optimal to remove applications with numbers
1
and
2
, freeing
5
units of memory.
b
1
+
b
2
=3
.