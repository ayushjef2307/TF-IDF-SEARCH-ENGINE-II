D. Divide and Summarize
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
Mike received an array
a
of length
n
as a birthday present and decided to test how pretty it is.
An array would pass the
i
-th prettiness test if there is a way to get an array with a sum of elements totaling
s
i
, using some number (possibly zero) of slicing operations.
An array slicing operation is conducted in the following way:
assume
mid=⌊
max(array)+min(array)
2
⌋
, where
max
and
min
 — are functions that find the maximum and the minimum array elements. In other words,
mid
is the sum of the maximum and the minimum element of
array
divided by
2
rounded down.
Then the array is split into two parts
left
and
right
. The
left
array contains all elements which are less than or equal
mid
, and the
right
array contains all elements which are greater than
mid
. Elements in
left
and
right
keep their relative order from
array
.
During the third step we choose which of the
left
and
right
arrays we want to keep. The chosen array replaces the current one and the other is permanently discarded.
You need to help Mike find out the results of
q
prettiness tests.
Note that you test the prettiness of the array
a
, so you start each prettiness test with the primordial (initial) array
a
. Thus, the first slice (if required) is always performed on the array
a
.
Input
Each test contains one or more test cases. The first line contains the number of test cases
t
(
1≤t≤100
).
The first line of each test case contains two integers
n
and
q
(1≤n,q≤
10
5
)
 — the length of the array
a
and the total number of prettiness tests.
The second line of each test case contains
n
integers
a
1
,
a
2
,...,
a
n
(1≤
a
i
≤
10
6
)
 — the contents of the array
a
.
Next
q
lines of each test case contain a single integer
s
i
(1≤
s
i
≤
10
9
)
 — the sum of elements which Mike wants to get in the
i
-th test.
It is guaranteed that the sum of
n
and the sum of
q
does not exceed
10
5
(
∑n,∑q≤
10
5
).
Output
Print
q
lines, each containing either a "Yes" if the corresponding prettiness test is passed and "No" in the opposite case.
Example
input
Copy
2
5 5
1 2 3 4 5
1
8
9
12
6
5 5
3 1 3 1 3
1
2
3
9
11
output
Copy
Yes
No
Yes
No
Yes
No
Yes
No
Yes
Yes
Note
Explanation of the first test case:
We can get an array with the sum
s
1
=1
in the following way:
1.1
a=[1,2,3,4,5]
,
mid=
1+5
2
=3
,
left=[1,2,3]
,
right=[4,5]
. We choose to keep the
left
array.
1.2
a=[1,2,3]
,
mid=
1+3
2
=2
,
left=[1,2]
,
right=[3]
. We choose to keep the
left
array.
1.3
a=[1,2]
,
mid=
1+2
2
=1
,
left=[1]
,
right=[2]
. We choose to keep the
left
array with the sum equalling
1
.
It can be demonstrated that an array with the sum
s
2
=8
is impossible to generate.
An array with the sum
s
3
=9
can be generated in the following way:
3.1
a=[1,2,3,4,5]
,
mid=
1+5
2
=3
,
left=[1,2,3]
,
right=[4,5]
. We choose to keep the
right
array with the sum equalling
9
.
It can be demonstrated that an array with the sum
s
4
=12
is impossible to generate.
We can get an array with the sum
s
5
=6
in the following way:
5.1
a=[1,2,3,4,5]
,
mid=
1+5
2
=3
,
left=[1,2,3]
,
right=[4,5]
. We choose to keep the
left
with the sum equalling
6
.
Explanation of the second test case:
It can be demonstrated that an array with the sum
s
1
=1
is imposssible to generate.
We can get an array with the sum
s
2
=2
in the following way:
2.1
a=[3,1,3,1,3]
,
mid=
1+3
2
=2
,
left=[1,1]
,
right=[3,3,3]
. We choose to keep the
left
array with the sum equalling
2
.
It can be demonstrated that an array with the sum
s
3
=3
is imposssible to generate.
We can get an array with the sum
s
4
=9
in the following way:
4.1
a=[3,1,3,1,3]
,
mid=
1+3
2
=2
,
left=[1,1]
,
right=[3,3,3]
. We choose to keep the
right
array with the sum equalling
9
.
We can get an array with the sum
s
5
=11
with zero slicing operations, because array sum is equal to
11
.