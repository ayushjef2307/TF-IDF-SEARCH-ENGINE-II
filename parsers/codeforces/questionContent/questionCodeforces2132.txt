A. Avoid Trygub
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
A string
b
is a subsequence of a string
a
if
b
can be obtained from
a
by deletion of several (possibly, zero or all) characters. For example, "xy" is a subsequence of "xzyw" and "xy", but not "yx".
You are given a string
a
. Your task is to reorder the characters of
a
so that "trygub" is not a subsequence of the resulting string.
In other words, you should find a string
b
which is a permutation of symbols of the string
a
and "trygub" is not a subsequence of
b
.
We have a truly marvelous proof that any string can be arranged not to contain "trygub" as a subsequence, but this problem statement is too short to contain it.
Input
The first line contains a single integer
t
(
1≤t≤100
) — the number of test cases.
The first line of each test case contains a single integer
n
(
1≤n≤200
) — the length of
a
.
The next line contains the string
a
of length
n
, consisting of lowercase English letters.
Output
For each test case, output a string
b
of length
n
which is a permutation of characters of the string
a
, and such that "trygub" is not a subsequence of it.
If there exist multiple possible strings
b
, you can print any.
Example
input
Copy
3
11
antontrygub
15
bestcoordinator
19
trywatchinggurabruh
output
Copy
bugyrtnotna
bestcoordinator
bruhtrywatchinggura
Note
In the first test case, "bugyrtnotna" does not contain "trygub" as a subsequence. It does contain the letters of "trygub", but not in the correct order, so it is not a subsequence.
In the second test case, we did not change the order of characters because it is not needed.
In the third test case, "bruhtrywatchinggura" does contain "trygu" as a subsequence, but not "trygub".