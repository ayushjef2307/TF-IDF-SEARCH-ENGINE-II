A. Permutation Forgery
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
A permutation of length
n
is an array consisting of
n
distinct integers from
1
to
n
in arbitrary order. For example,
[2,3,1,5,4]
is a permutation, but
[1,2,2]
is not a permutation (
2
appears twice in the array) and
[1,3,4]
is also not a permutation (
n=3
but there is
4
in the array).
Let
p
be any permutation of length
n
. We define the fingerprint
F(p)
of
p
as the sorted array of sums of adjacent elements in
p
. More formally,
F(p)=sort([
p
1
+
p
2
,
p
2
+
p
3
,…,
p
n−1
+
p
n
]).
F
(
)
(
[
]
)
For example, if
n=4
and
p=[1,4,2,3],
then the fingerprint is given by
F(p)=sort([1+4,4+2,2+3])=sort([5,6,5])=[5,5,6]
.
You are given a permutation
p
of length
n
. Your task is to find a different permutation
p
′
with the same fingerprint. Two permutations
p
and
p
′
are considered different if there is some index
i
such that
p
i
≠
p
′
i
.
Input
Each test contains multiple test cases. The first line contains the number of test cases
t
(
1≤t≤668
). Description of the test cases follows.
The first line of each test case contains a single integer
n
(
2≤n≤100
)  — the length of the permutation.
The second line of each test case contains
n
integers
p
1
,…,
p
n
(
1≤
p
i
≤n
). It is guaranteed that
p
is a permutation.
Output
For each test case, output
n
integers
p
′
1
,…,
p
′
n
— a permutation such that
p
′
≠p
and
F(
p
′
)=F(p)
.
We can prove that for every permutation satisfying the input constraints, a solution exists.
If there are multiple solutions, you may output any.
Example
input
Copy
3
2
1 2
6
2 1 6 5 4 3
5
2 4 3 1 5
output
Copy
2 1
1 2 5 6 3 4
3 1 5 2 4
Note
In the first test case,
F(p)=sort([1+2])=[3]
.
And
F(
p
′
)=sort([2+1])=[3]
.
In the second test case,
F(p)=sort([2+1,1+6,6+5,5+4,4+3])=sort([3,7,11,9,7])=[3,7,7,9,11]
.
And
F(
p
′
)=sort([1+2,2+5,5+6,6+3,3+4])=sort([3,7,11,9,7])=[3,7,7,9,11]
.
In the third test case,
F(p)=sort([2+4,4+3,3+1,1+5])=sort([6,7,4,6])=[4,6,6,7]
.
And
F(
p
′
)=sort([3+1,1+5,5+2,2+4])=sort([4,6,7,6])=[4,6,6,7]
.