A2. Prefix Flip (Hard Version)
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
This is the hard version of the problem. The difference between the versions is the constraint on
n
and the required number of operations. You can make hacks only if all versions of the problem are solved.
There are two binary strings
a
and
b
of length
n
(a binary string is a string consisting of symbols
0
and
1
). In an operation, you select a prefix of
a
, and simultaneously invert the bits in the prefix (
0
changes to
1
and
1
changes to
0
) and reverse the order of the bits in the prefix.
For example, if
a=001011
and you select the prefix of length
3
, it becomes
011011
. Then if you select the entire string, it becomes
001001
.
Your task is to transform the string
a
into
b
in at most
2n
operations. It can be proved that it is always possible.
Input
The first line contains a single integer
t
(
1≤t≤1000
)  — the number of test cases. Next
3t
lines contain descriptions of test cases.
The first line of each test case contains a single integer
n
(
1≤n≤
10
5
)  — the length of the binary strings.
The next two lines contain two binary strings
a
and
b
of length
n
.
It is guaranteed that the sum of
n
across all test cases does not exceed
10
5
.
Output
For each test case, output an integer
k
(
0≤k≤2n
), followed by
k
integers
p
1
,…,
p
k
(
1≤
p
i
≤n
). Here
k
is the number of operations you use and
p
i
is the length of the prefix you flip in the
i
-th operation.
Example
input
Copy
5
2
01
10
5
01011
11100
2
01
01
10
0110011011
1000110100
1
0
1
output
Copy
3 1 2 1
6 5 2 5 3 1 2
0
9 4 1 2 10 4 1 2 1 5
1 1
Note
In the first test case, we have
01→11→00→10
.
In the second test case, we have
01011→00101→11101→01000→10100→00100→11100
.
In the third test case, the strings are already the same. Another solution is to flip the prefix of length
2
, which will leave
a
unchanged.