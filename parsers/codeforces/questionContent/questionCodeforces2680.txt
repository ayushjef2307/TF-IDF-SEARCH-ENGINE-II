A. Hilbert's Hotel
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Hilbert's Hotel is a very unusual hotel since the number of rooms is infinite! In fact, there is exactly one room for every integer, including zero and negative integers. Even stranger, the hotel is currently at full capacity, meaning there is exactly one guest in every room. The hotel's manager, David Hilbert himself, decides he wants to shuffle the guests around because he thinks this will create a vacancy (a room without a guest).
For any integer
k
and positive integer
n
, let
kmodn
denote the remainder when
k
is divided by
n
. More formally,
r=kmodn
is the smallest non-negative integer such that
k−r
is divisible by
n
. It always holds that
0≤kmodn≤n−1
. For example,
100mod12=4
and
(−1337)mod3=1
.
Then the shuffling works as follows. There is an array of
n
integers
a
0
,
a
1
,…,
a
n−1
. Then for each integer
k
, the guest in room
k
is moved to room number
k+
a
kmodn
.
After this shuffling process, determine if there is still exactly one guest assigned to each room. That is, there are no vacancies or rooms with multiple guests.
Input
Each test consists of multiple test cases. The first line contains a single integer
t
(
1≤t≤
10
4
) — the number of test cases. Next
2t
lines contain descriptions of test cases.
The first line of each test case contains a single integer
n
(
1≤n≤2⋅
10
5
) — the length of the array.
The second line of each test case contains
n
integers
a
0
,
a
1
,…,
a
n−1
(
−
10
9
≤
a
i
≤
10
9
).
It is guaranteed that the sum of
n
over all test cases does not exceed
2⋅
10
5
.
Output
For each test case, output a single line containing "YES" if there is exactly one guest assigned to each room after the shuffling process, or "NO" otherwise. You can print each letter in any case (upper or lower).
Example
input
Copy
6
1
14
2
1 -1
4
5 5 5 1
3
3 2 1
2
0 1
5
-239 -2 -100 -3 -11
output
Copy
YES
YES
YES
NO
NO
YES
Note
In the first test case, every guest is shifted by
14
rooms, so the assignment is still unique.
In the second test case, even guests move to the right by
1
room, and odd guests move to the left by
1
room. We can show that the assignment is still unique.
In the third test case, every fourth guest moves to the right by
1
room, and the other guests move to the right by
5
rooms. We can show that the assignment is still unique.
In the fourth test case, guests
0
and
1
are both assigned to room
3
.
In the fifth test case, guests
1
and
2
are both assigned to room
2
.