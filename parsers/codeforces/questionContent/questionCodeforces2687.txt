F. Make It Ascending
time limit per test7 seconds
memory limit per test512 megabytes
inputstandard input
outputstandard output
You are given an array
a
consisting of
n
elements. You may apply several operations (possibly zero) to it.
During each operation, you choose two indices
i
and
j
(
1≤i,j≤n
;
i≠j
), increase
a
j
by
a
i
, and remove the
i
-th element from the array (so the indices of all elements to the right to it decrease by
1
, and
n
also decreases by
1
).
Your goal is to make the array
a
strictly ascending. That is, the condition
a
1
<
a
2
<⋯<
a
n
should hold (where
n
is the resulting size of the array).
Calculate the minimum number of actions required to make the array strictly ascending.
Input
The first line contains one integer
T
(
1≤T≤10000
) — the number of test cases.
Each test case consists of two lines. The first line contains one integer
n
(
1≤n≤15
) — the number of elements in the initial array
a
.
The second line contains
n
integers
a
1
,
a
2
, ...,
a
n
(
1≤
a
i
≤
10
6
).
It is guaranteed that:
the number of test cases having
n≥5
is not greater than
5000
;
the number of test cases having
n≥8
is not greater than
500
;
the number of test cases having
n≥10
is not greater than
100
;
the number of test cases having
n≥11
is not greater than
50
;
the number of test cases having
n≥12
is not greater than
25
;
the number of test cases having
n≥13
is not greater than
10
;
the number of test cases having
n≥14
is not greater than
3
;
the number of test cases having
n≥15
is not greater than
1
.
Output
For each test case, print the answer as follows:
In the first line, print
k
— the minimum number of operations you have to perform. Then print
k
lines, each containing two indices
i
and
j
for the corresponding operation. Note that the numeration of elements in the array changes after removing elements from it. If there are multiple optimal sequences of operations, print any one of them.
Example
input
Copy
4
8
2 1 3 5 1 2 4 5
15
16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1
2
3 3
14
1 2 3 4 5 6 7 8 9 10 11 12 13 14
output
Copy
3
6 8
1 6
4 1
7
1 15
1 13
1 11
1 9
1 7
1 5
1 3
1
2 1
0
Note
In the first test case, the sequence of operations changes
a
as follows:
[2,1,3,5,1,2,4,5]→[2,1,3,5,1,4,7]→[1,3,5,1,6,7]→[2,3,5,6,7]
.