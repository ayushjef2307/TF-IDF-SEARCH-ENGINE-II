B. Beautiful Numbers
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are given a permutation
p=[
p
1
,
p
2
,…,
p
n
]
of integers from
1
to
n
. Let's call the number
m
(
1≤m≤n
) beautiful, if there exists two indices
l,r
(
1≤l≤r≤n
), such that the numbers
[
p
l
,
p
l+1
,…,
p
r
]
is a permutation of numbers
1,2,…,m
.
For example, let
p=[4,5,1,3,2,6]
. In this case, the numbers
1,3,5,6
are beautiful and
2,4
are not. It is because:
if
l=3
and
r=3
we will have a permutation
[1]
for
m=1
;
if
l=3
and
r=5
we will have a permutation
[1,3,2]
for
m=3
;
if
l=1
and
r=5
we will have a permutation
[4,5,1,3,2]
for
m=5
;
if
l=1
and
r=6
we will have a permutation
[4,5,1,3,2,6]
for
m=6
;
it is impossible to take some
l
and
r
, such that
[
p
l
,
p
l+1
,…,
p
r
]
is a permutation of numbers
1,2,…,m
for
m=2
and for
m=4
.
You are given a permutation
p=[
p
1
,
p
2
,…,
p
n
]
. For all
m
(
1≤m≤n
) determine if it is a beautiful number or not.
Input
The first line contains the only integer
t
(
1≤t≤1000
)  — the number of test cases in the input. The next lines contain the description of test cases.
The first line of a test case contains a number
n
(
1≤n≤2⋅
10
5
) — the length of the given permutation
p
. The next line contains
n
integers
p
1
,
p
2
,…,
p
n
(
1≤
p
i
≤n
, all
p
i
are different) — the given permutation
p
.
It is guaranteed, that the sum of
n
from all test cases in the input doesn't exceed
2⋅
10
5
.
Output
Print
t
lines — the answers to test cases in the order they are given in the input.
The answer to a test case is the string of length
n
, there the
i
-th character is equal to
1
if
i
is a beautiful number and is equal to
0
if
i
is not a beautiful number.
Example
input
Copy
3
6
4 5 1 3 2 6
5
5 3 1 2 4
4
1 4 3 2
output
Copy
101011
11111
1001
Note
The first test case is described in the problem statement.
In the second test case all numbers from
1
to
5
are beautiful:
if
l=3
and
r=3
we will have a permutation
[1]
for
m=1
;
if
l=3
and
r=4
we will have a permutation
[1,2]
for
m=2
;
if
l=2
and
r=4
we will have a permutation
[3,1,2]
for
m=3
;
if
l=2
and
r=5
we will have a permutation
[3,1,2,4]
for
m=4
;
if
l=1
and
r=5
we will have a permutation
[5,3,1,2,4]
for
m=5
.