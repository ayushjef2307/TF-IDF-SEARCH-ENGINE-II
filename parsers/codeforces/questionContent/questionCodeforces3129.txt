C. Minimize The Integer
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are given a huge integer
a
consisting of
n
digits (
n
is between
1
and
3⋅
10
5
, inclusive). It may contain leading zeros.
You can swap two digits on adjacent (neighboring) positions if the swapping digits are of different parity (that is, they have different remainders when divided by
2
).
For example, if
a=032867235
you can get the following integers in a single operation:
302867235
if you swap the first and the second digits;
023867235
if you swap the second and the third digits;
032876235
if you swap the fifth and the sixth digits;
032862735
if you swap the sixth and the seventh digits;
032867325
if you swap the seventh and the eighth digits.
Note, that you can't swap digits on positions
2
and
4
because the positions are not adjacent. Also, you can't swap digits on positions
3
and
4
because the digits have the same parity.
You can perform any number (possibly, zero) of such operations.
Find the minimum integer you can obtain.
Note that the resulting integer also may contain leading zeros.
Input
The first line contains one integer
t
(
1≤t≤
10
4
) — the number of test cases in the input.
The only line of each test case contains the integer
a
, its length
n
is between
1
and
3⋅
10
5
, inclusive.
It is guaranteed that the sum of all values
n
does not exceed
3⋅
10
5
.
Output
For each test case print line — the minimum integer you can obtain.
Example
input
Copy
3
0709
1337
246432
output
Copy
0079
1337
234642
Note
In the first test case, you can perform the following sequence of operations (the pair of swapped digits is highlighted):
0
70
–
–
–
9→0079
.
In the second test case, the initial integer is optimal.
In the third test case you can perform the following sequence of operations:
246
43
–
–
–
2→24
63
–
–
–
42→2
43
–
–
–
642→234642
.