A. Everybody Likes Good Arrays!
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
An array
a
is good if for all pairs of adjacent elements,
a
i
and
a
i+1
(
1≤i<n
) are of different parity. Note that an array of size
1
is trivially good.
You are given an array of size
n
.
In one operation you can select any pair of adjacent elements in which both elements are of the same parity, delete them, and insert their product in the same position.
Find the minimum number of operations to form a good array.
Input
Each test contains multiple test cases. The first line contains the number of test cases
t
(
1≤t≤500
). The description of the test cases follows.
The first line of each test case contains an integer
n
(
1≤n≤100
).
The second line of each test case contains
n
integers
a
1
,
a
2
,…,
a
n
(
1≤
a
i
≤
10
9
).
Output
For each test case print an integer, the minimum number of operations required to form a good array.
Example
input
Copy
3
5
1 7 11 2 13
4
1 2 3 4
6
1 1 1 2 2 3
output
Copy
2
0
3
Note
Consider the first test case. Select the
2
-nd and the
3
-rd integers and apply the operation on them. The array changes from
[1,7,11,2,13]
to
[1,77,2,13]
. Next, select the
1
-st and the
2
-nd integers, array changes from
[1,77,2,13]
to
[77,2,13]
. Thus we require
2
operations. It can be proved that this is the minimum number of operations.
In the second test case, the given array is already good. So we require
0
operations.