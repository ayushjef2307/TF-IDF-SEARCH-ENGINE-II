B2. Character Swap (Hard Version)
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
This problem is different from the easy version. In this version Ujan makes at most
2n
swaps. In addition,
k≤1000,n≤50
and it is necessary to print swaps themselves. You can hack this problem if you solve it. But you can hack the previous problem only if you solve both problems.
After struggling and failing many times, Ujan decided to try to clean up his house again. He decided to get his strings in order first.
Ujan has two distinct strings
s
and
t
of length
n
consisting of only of lowercase English characters. He wants to make them equal. Since Ujan is lazy, he will perform the following operation at most
2n
times: he takes two positions
i
and
j
(
1≤i,j≤n
, the values
i
and
j
can be equal or different), and swaps the characters
s
i
and
t
j
.
Ujan's goal is to make the strings
s
and
t
equal. He does not need to minimize the number of performed operations: any sequence of operations of length
2n
or shorter is suitable.
Input
The first line contains a single integer
k
(
1≤k≤1000
), the number of test cases.
For each of the test cases, the first line contains a single integer
n
(
2≤n≤50
), the length of the strings
s
and
t
.
Each of the next two lines contains the strings
s
and
t
, each having length exactly
n
. The strings consist only of lowercase English letters. It is guaranteed that strings are different.
Output
For each test case, output "Yes" if Ujan can make the two strings equal with at most
2n
operations and "No" otherwise. You can print each letter in any case (upper or lower).
In the case of "Yes" print
m
(
1≤m≤2n
) on the next line, where
m
is the number of swap operations to make the strings equal. Then print
m
lines, each line should contain two integers
i,j
(
1≤i,j≤n
) meaning that Ujan swaps
s
i
and
t
j
during the corresponding operation. You do not need to minimize the number of operations. Any sequence of length not more than
2n
is suitable.
Example
input
Copy
4
5
souse
houhe
3
cat
dog
2
aa
az
3
abc
bca
output
Copy
Yes
1
1 4
No
No
Yes
3
1 2
3 1
2 3