C2. Increasing Subsequence (hard version)
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).
You are given a sequence
a
consisting of
n
integers.
You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).
For example, for the sequence
[1,2,4,3,2]
the answer is
4
(you take
1
and the sequence becomes
[2,4,3,2]
, then you take the rightmost element
2
and the sequence becomes
[2,4,3]
, then you take
3
and the sequence becomes
[2,4]
and then you take
4
and the sequence becomes
[2]
, the obtained increasing sequence is
[1,2,3,4]
).
Input
The first line of the input contains one integer
n
(
1≤n≤2⋅
10
5
) — the number of elements in
a
.
The second line of the input contains
n
integers
a
1
,
a
2
,…,
a
n
(
1≤
a
i
≤2⋅
10
5
), where
a
i
is the
i
-th element of
a
.
Output
In the first line of the output print
k
— the maximum number of elements in a strictly increasing sequence you can obtain.
In the second line print a string
s
of length
k
, where the
j
-th character of this string
s
j
should be 'L' if you take the leftmost element during the
j
-th move and 'R' otherwise. If there are multiple answers, you can print any.
Examples
input
Copy
5
1 2 4 3 2
output
Copy
4
LRRR
input
Copy
7
1 3 5 6 5 4 2
output
Copy
6
LRLRRR
input
Copy
3
2 2 2
output
Copy
1
R
input
Copy
4
1 2 4 3
output
Copy
4
LLRR
Note
The first example is described in the problem statement.