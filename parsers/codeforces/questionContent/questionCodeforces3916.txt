B. Substring Removal
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are given a string
s
of length
n
consisting only of lowercase Latin letters.
A substring of a string is a contiguous subsequence of that string. So, string "forces" is substring of string "codeforces", but string "coder" is not.
Your task is to calculate the number of ways to remove exactly one substring from this string in such a way that all remaining characters are equal (the number of distinct characters either zero or one).
It is guaranteed that there is at least two different characters in
s
.
Note that you can remove the whole string and it is correct. Also note that you should remove at least one character.
Since the answer can be rather large (not very large though) print it modulo
998244353
.
If you are Python programmer, consider using PyPy instead of Python when you submit your code.
Input
The first line of the input contains one integer
n
(
2≤n≤2⋅
10
5
) — the length of the string
s
.
The second line of the input contains the string
s
of length
n
consisting only of lowercase Latin letters.
It is guaranteed that there is at least two different characters in
s
.
Output
Print one integer — the number of ways modulo
998244353
to remove exactly one substring from
s
in such way that all remaining characters are equal.
Examples
input
Copy
4
abaa
output
Copy
6
input
Copy
7
aacdeee
output
Copy
6
input
Copy
2
az
output
Copy
3
Note
Let
s[l;r]
be the substring of
s
from the position
l
to the position
r
inclusive.
Then in the first example you can remove the following substrings:
s[1;2]
;
s[1;3]
;
s[1;4]
;
s[2;2]
;
s[2;3]
;
s[2;4]
.
In the second example you can remove the following substrings:
s[1;4]
;
s[1;5]
;
s[1;6]
;
s[1;7]
;
s[2;7]
;
s[3;7]
.
In the third example you can remove the following substrings:
s[1;1]
;
s[1;2]
;
s[2;2]
.