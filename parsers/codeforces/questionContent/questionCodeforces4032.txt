G. Monsters and Potions
time limit per test3 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
Polycarp is an introvert person. In fact he is so much of an introvert that he plays "Monsters and Potions" board game alone. The board of the game is a row of
n
cells. The cells are numbered from
1
to
n
from left to right. There are three types of cells: a cell containing a single monster, a cell containing a single potion or a blank cell (it contains neither a monster nor a potion).
Polycarp has
m
tokens representing heroes fighting monsters, which are initially located in the blank cells
s
1
,
s
2
,…,
s
m
. Polycarp's task is to choose a single cell (rally point) and one by one move all the heroes into this cell. A rally point can be a cell of any of three types.
After Policarp selects a rally point, he picks a hero and orders him to move directly to the point. Once that hero reaches the point, Polycarp picks another hero and orders him also to go to the point. And so forth, until all the heroes reach the rally point cell. While going to the point, a hero can not deviate from the direct route or take a step back. A hero just moves cell by cell in the direction of the point until he reaches it. It is possible that multiple heroes are simultaneously in the same cell.
Initially the
i
-th hero has
h
i
hit points (HP). Monsters also have HP, different monsters might have different HP. And potions also have HP, different potions might have different HP.
If a hero steps into a cell which is blank (i.e. doesn't contain a monster/potion), hero's HP does not change.
If a hero steps into a cell containing a monster, then the hero and the monster fight. If monster's HP is strictly higher than hero's HP, then the monster wins and Polycarp loses the whole game. If hero's HP is greater or equal to monster's HP, then the hero wins and monster's HP is subtracted from hero's HP. I.e. the hero survives if his HP drops to zero, but dies (and Polycarp looses) if his HP becomes negative due to a fight. If a hero wins a fight with a monster, then the monster disappears, and the cell becomes blank.
If a hero steps into a cell containing a potion, then the hero drinks the potion immediately. As a result, potion's HP is added to hero's HP, the potion disappears, and the cell becomes blank.
Obviously, Polycarp wants to win the game. It means that he must choose such rally point and the order in which heroes move, that every hero reaches the rally point and survives. I.e. Polycarp loses if a hero reaches rally point but is killed by a monster at the same time. Polycarp can use any of
n
cells as a rally point — initially it can contain a monster, a potion, or be a blank cell with or without a hero in it.
Help Polycarp write a program to choose a rally point and the order in which heroes move.
Input
The first line of the input contains two integers
n
and
m
(
1≤n≤100
;
1≤m≤n
) — length of the game board and the number of heroes on it.
The following
m
lines describe heroes. Each line contains two integers
s
i
and
h
i
(
1≤
s
i
≤n
;
1≤
h
i
≤
10
6
), where
s
i
is the initial position and
h
i
is the initial HP of the
i
-th hero. It is guaranteed that each cell
s
i
is blank. It is also guaranteed that all
s
i
are different.
The following line contains
n
integers
a
1
,
a
2
,…,
a
n
(
−
10
6
≤
a
j
≤
10
6
), where
a
j
describes the
i
-th cell of the game board:
a
j
=0
means that the
i
-th cell is blank,
a
j
<0
means that the
i
-th cell contains monster with positive HP of
−
a
j
,
a
j
>0
means that the
i
-th cell contains potion with
a
j
HP.
Output
On the first line of the output print the index of the rally point cell.
On the second line print
m
integers — the order in which heroes should move to the rally point. Heroes are numbered from
1
to
m
in the order they are given in the input.
If there are multiple solutions, print any of them.
If it is impossible to find a rally point which can be reached by all heroes, print a single integer -1 in the output.
Examples
input
Copy
8 3
8 2
1 3
4 9
0 3 -5 0 -5 -4 -1 0
output
Copy
6
3 1 2 
input
Copy
1 1
1 1
0
output
Copy
1
1 
input
Copy
3 2
1 1
3 1
0 -5000 0
output
Copy
-1
input
Copy
8 3
1 15
5 10
8 1
0 -5 -5 -5 0 -5 -5 0
output
Copy
7
2 1 3 
Note
The picture illustrates the first example: