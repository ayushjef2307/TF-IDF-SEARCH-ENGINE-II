B. Sort with Step
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Let's define a permutation of length
n
as an array
p
of length
n
, which contains every number from
1
to
n
exactly once.
You are given a permutation
p
1
,
p
2
,…,
p
n
and a number
k
. You need to sort this permutation in the ascending order. In order to do it, you can repeat the following operation any number of times (possibly, zero):
pick two elements of the permutation
p
i
and
p
j
such that
|i−j|=k
, and swap them.
Unfortunately, some permutations can't be sorted with some fixed numbers
k
. For example, it's impossible to sort
[2,4,3,1]
with
k=2
.
That's why, before starting the sorting, you can make at most one preliminary exchange:
choose any pair
p
i
and
p
j
and swap them.
Your task is to:
check whether is it possible to sort the permutation without any preliminary exchanges,
if it's not, check, whether is it possible to sort the permutation using exactly one preliminary exchange.
For example, if
k=2
and permutation is
[2,4,3,1]
, then you can make a preliminary exchange of
p
1
and
p
4
, which will produce permutation
[1,4,3,2]
, which is possible to sort with given
k
.
Input
Each test contains multiple test cases. The first line contains the number of test cases
t
(
1≤t≤
10
4
). The description of the test cases follows.
The first line of each test case contains two integers
n
and
k
(
2≤n≤2⋅
10
5
;
1≤k≤n−1
) — length of the permutation, and a distance between elements that can be swapped.
The second line of each test case contains
n
integers
p
1
,
p
2
,…,
p
n
(
1≤
p
i
≤n
) — elements of the permutation
p
.
It is guaranteed that the sum of
n
over all test cases does not exceed
2⋅
10
5
.
Output
For each test case print
0, if it is possible to sort the permutation without preliminary exchange;
1, if it is possible to sort the permutation with one preliminary exchange, but not possible without preliminary exchange;
-1, if it is not possible to sort the permutation with at most one preliminary exchange.
Example
input
Copy
6
4 1
3 1 2 4
4 2
3 4 1 2
4 2
3 1 4 2
10 3
4 5 9 1 8 6 10 2 3 7
10 3
4 6 9 1 8 5 10 2 3 7
10 3
4 6 9 1 8 5 10 3 2 7
output
Copy
0
0
1
0
1
-1
Note
In the first test case, there is no need in preliminary exchange, as it is possible to swap
(
p
1
,
p
2
)
and then
(
p
2
,
p
3
)
.
In the second test case, there is no need in preliminary exchange, as it is possible to swap
(
p
1
,
p
3
)
and then
(
p
2
,
p
4
)
.
In the third test case, you need to apply preliminary exchange to
(
p
2
,
p
3
)
. After that the permutation becomes
[3,4,1,2]
and can be sorted with
k=2
.