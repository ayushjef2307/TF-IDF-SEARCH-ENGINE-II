A. Make A Equal to B
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are given two arrays
a
and
b
of
n
elements, each element is either
0
or
1
.
You can make operations of
2
kinds.
Pick an index
i
and change
a
i
to
1−
a
i
.
Rearrange the array
a
however you want.
Find the minimum number of operations required to make
a
equal to
b
.
Input
Each test contains multiple test cases. The first line contains a single integer
t
(
1≤t≤400
) — the number of test cases. Description of the test cases follows.
The first line of each test case contains a single integer
n
(
1≤n≤100
) — the length of the arrays
a
and
b
.
The second line of each test case contains
n
space-separated integers
a
1
,
a
2
,…,
a
n
(
a
i
is
0
or
1
), representing the array
a
.
The third line of each test case contains
n
space-separated integers
b
1
,
b
2
,…,
b
n
(
b
i
is
0
or
1
), representing the array
b
.
Output
For each test case, print the minimum number of operations required to make
a
equal to
b
.
Example
input
Copy
5
3
1 0 1
0 0 1
4
1 1 0 0
0 1 1 1
2
1 1
1 1
4
1 0 0 1
0 1 1 0
1
0
1
output
Copy
1
2
0
1
1
Note
In the first case, we need only one operation: change
a
1
to
1−
a
i
. Now
a=[0,0]
which is equal to
b
.
In the second case, the optimal way is to rearrange
a
to get the array
[0,1,11
. Now
a=[0,0,1]
which is equal to
b
.
In the second case, one of optimal ways would be to first change
a
3
to
1−
a
3
, then rearrange
a
.
In the third case, no operation is needed.
In the fourth case, the optimal way is to rearrange
a
to get the array
[0,1,1,0]
.