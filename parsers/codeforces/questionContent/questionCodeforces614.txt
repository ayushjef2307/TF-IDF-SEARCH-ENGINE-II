F. Kirei and the Linear Function
time limit per test3 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
Given the string
s
of decimal digits (0-9) of length
n
.
A substring is a sequence of consecutive characters of a string. The substring of this string is defined by a pair of indexes — with its left and right ends. So, each pair of indexes (
l,r
), where
1≤l≤r≤n
, corresponds to a substring of the string
s
. We will define as
v(l,r)
the numeric value of the corresponding substring (leading zeros are allowed in it).
For example, if
n=7
,
s=
"1003004", then
v(1,3)=100
,
v(2,3)=0
and
v(2,7)=3004
.
You are given
n
,
s
and an integer
w
(
1≤w<n
).
You need to process
m
queries, each of which is characterized by
3
numbers
l
i
,
r
i
,
k
i
(
1≤
l
i
≤
r
i
≤n;0≤
k
i
≤8
).
The answer to the
i
th query is such a pair of substrings of length
w
that if we denote them as
(
L
1
,
L
1
+w−1)
and
(
L
2
,
L
2
+w−1)
, then:
L
1
≠
L
2
, that is, the substrings are different;
the remainder of dividing a number
v(
L
1
,
L
1
+w−1)⋅v(
l
i
,
r
i
)+v(
L
2
,
L
2
+w−1)
by
9
is equal to
k
i
.
If there are many matching substring pairs, then find a pair where
L
1
is as small as possible. If there are many matching pairs in this case, then minimize
L
2
.
Note that the answer may not exist.
Input
The first line contains a single integer
t
(
1≤t≤
10
4
) — number of input test cases.
The first line of each test case contains a string
s
, which contains only the characters 0-9 and has a length
n
(
2≤n≤2⋅
10
5
).
The second line contains two integers
w,m
(
1≤w<n,1≤m≤2⋅
10
5
), where
n
— is the length of the given string
s
. The number
w
denotes the lengths of the substrings being searched for, and
m
is the number of queries to be processed.
The following
m
lines contain integers
l
i
,
r
i
,
k
i
(
1≤
l
i
≤
r
i
≤n
,
0≤
k
i
≤8
) —
i
th query parameters.
It is guaranteed that the sum of
n
over all test cases does not exceed
2⋅
10
5
. It is also guaranteed that the sum of
m
over all test cases does not exceed
2⋅
10
5
.
Output
For each request, print in a separate line:
left borders of the required substrings:
L
1
and
L
2
;
-1 -1 otherwise, if there is no solution.
If there are several solutions, minimize
L
1
first, and minimize
L
2
second.
Example
input
Copy
5
1003004
4 1
1 2 1
179572007
4 2
2 7 3
2 7 4
111
2 1
2 2 6
0000
1 2
1 4 0
1 4 1
484
1 5
2 2 0
2 3 7
1 2 5
3 3 8
2 2 6
output
Copy
2 4
1 5
1 2
-1 -1
1 2
-1 -1
1 3
1 3
-1 -1
-1 -1
-1 -1
Note
Consider the first test case of example inputs. In this test case
n=7
,
s=
"1003004",
w=4
and one query
l
1
=1
,
r
1
=2
,
k
1
=1
. Note that
v(1,2)=10
. We need to find a pair of substrings of length
4
such that
v(
L
1
,
L
1
+3)⋅10+v(
L
2
,
L
2
+3)
has a remainder of
k
1
=1
when divided by
9
. The values
L
1
=2,
L
2
=4
actually satisfy all the requirements:
v(
L
1
,
L
1
+w−1)=v(2,5)=30
,
v(
L
2
,
L
2
+w−1)=v(4,7)=3004
. Indeed,
30⋅10+3004=3304
, which has a remainder of
1
when divided by
9
. It can be shown that
L
1
=2
is the minimum possible value, and
L
2
=4
is the minimum possible with
L
1
=2
.