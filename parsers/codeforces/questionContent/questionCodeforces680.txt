C. Madoka and Formal Statement
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Given an array of integer
a
1
,
a
2
,…,
a
n
. In one operation you can make
a
i
:=
a
i
+1
if
i<n
and
a
i
≤
a
i+1
, or
i=n
and
a
i
≤
a
1
.
You need to check whether the array
a
1
,
a
2
,…,
a
n
can become equal to the array
b
1
,
b
2
,…,
b
n
in some number of operations (possibly, zero). Two arrays
a
and
b
of length
n
are called equal if
a
i
=
b
i
for all integers
i
from
1
to
n
.
Input
The input consists of multiple test cases. The first line contains a single integer
t
(
1≤t≤4⋅
10
4
) — the number of test cases. Description of the test cases follows.
The first line of each test case contains a single integer
n
(
2≤n≤2⋅
10
5
) – the length of the array.
The second line of each test case contains
n
integers
a
1
,…,
a
n
(
1≤
a
i
≤
10
9
) – the elements of the array
a
.
The third line of each test case contains
n
integers
b
1
,…,
b
n
(
1≤
b
i
≤
10
9
) – the elements of the array
b
.
It is guaranteed that the sum of
n
over all test cases does not exceed
2⋅
10
5
.
Output
For each test case, output "YES" if you can get the array
b
, otherwise output "NO".
You may print each letter in any case (for example, "YES", "Yes", "yes", "yEs" will all be recognized as positive answer).
Example
input
Copy
5
3
1 2 5
1 2 5
2
2 2
1 3
4
3 4 1 2
6 4 2 5
3
2 4 1
4 5 3
5
1 2 3 4 5
6 5 6 7 6
output
Copy
YES
NO
NO
NO
YES
Note
In the first test case, the array
a
is already equal to the array
b
.
In the second test case, we can't get the array
b
, because to do this we need to decrease
a
1
.
In the fifth test case, we can apply operations in order to the elements with indices
4,3,3,2,2,2,1,1,1,1
, and then get the array
[5,5,5,5,5]
. After that, you can apply operations in order to elements with indices
5,4,4,3,1
and already get an array
[6,5,6,7,6]
.