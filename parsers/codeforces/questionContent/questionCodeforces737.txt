D2. Chopping Carrots (Hard Version)
time limit per test4 seconds
memory limit per test64 megabytes
inputstandard input
outputstandard output
This is the hard version of the problem. The only difference between the versions is the constraints on
n
,
k
,
a
i
, and the sum of
n
over all test cases. You can make hacks only if both versions of the problem are solved.
Note the unusual memory limit.
You are given an array of integers
a
1
,
a
2
,…,
a
n
of length
n
, and an integer
k
.
The cost of an array of integers
p
1
,
p
2
,…,
p
n
of length
n
is
max
1≤i≤n
(⌊
a
i
p
i
⌋)−
min
1≤i≤n
(⌊
a
i
p
i
⌋).
a
a
Here,
⌊
x
y
⌋
denotes the integer part of the division of
x
by
y
. Find the minimum cost of an array
p
such that
1≤
p
i
≤k
for all
1≤i≤n
.
Input
The first line contains a single integer
t
(
1≤t≤100
) — the number of test cases.
The first line of each test case contains two integers
n
and
k
(
1≤n,k≤
10
5
).
The second line contains
n
integers
a
1
,
a
2
,…,
a
n
(
1≤
a
1
≤
a
2
≤…≤
a
n
≤
10
5
).
It is guaranteed that the sum of
n
over all test cases does not exceed
10
5
.
Output
For each test case, print a single integer — the minimum possible cost of an array
p
satisfying the condition above.
Example
input
Copy
7
5 2
4 5 6 8 11
5 12
4 5 6 8 11
3 1
2 9 15
7 3
2 3 5 5 6 9 10
6 56
54 286 527 1436 2450 2681
3 95
16 340 2241
2 2
1 3
output
Copy
2
0
13
1
4
7
0
Note
In the first test case, the optimal array is
p=[1,1,1,2,2]
. The resulting array of values of
⌊
a
i
p
i
⌋
is
[4,5,6,4,5]
. The cost of
p
is
max
1≤i≤n
(⌊
a
i
p
i
⌋)−
min
1≤i≤n
(⌊
a
i
p
i
⌋)=6−4=2
. We can show that there is no array (satisfying the condition from the statement) with a smaller cost.
In the second test case, one of the optimal arrays is
p=[12,12,12,12,12]
, which results in all
⌊
a
i
p
i
⌋
being
0
.
In the third test case, the only possible array is
p=[1,1,1]
.