B. Paranoid String
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Let's call a binary string
T
of length
m
indexed from
1
to
m
paranoid if we can obtain a string of length
1
by performing the following two kinds of operations
m−1
times in any order :
Select any substring of
T
that is equal to 01, and then replace it with 1.
Select any substring of
T
that is equal to 10, and then replace it with 0.
For example, if
T=
001, we can select the substring
[
T
2
T
3
]
and perform the first operation. So we obtain
T=
01.
You are given a binary string
S
of length
n
indexed from
1
to
n
. Find the number of pairs of integers
(l,r)
1≤l≤r≤n
such that
S[l…r]
(the substring of
S
from
l
to
r
) is a paranoid string.
Input
The first line contains an integer
t
(
1≤t≤1000
) — the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer
n
(
1≤n≤2⋅
10
5
) — the size of
S
.
The second line of each test case contains a binary string
S
of
n
characters
S
1
S
2
…
S
n
. (
S
i
=
0 or
S
i
=
1 for each
1≤i≤n
)
It is guaranteed that the sum of
n
over all test cases doesn't exceed
2⋅
10
5
.
Output
For each test case, output the number of pairs of integers
(l,r)
1≤l≤r≤n
such that
S[l…r]
(the substring of
S
from
l
to
r
) is a paranoid string.
Example
input
Copy
5
1
1
2
01
3
100
4
1001
5
11111
output
Copy
1
3
4
8
5
Note
In the first sample,
S
already has length
1
and doesn't need any operations.
In the second sample, all substrings of
S
are paranoid. For the entire string, it's enough to perform the first operation.
In the third sample, all substrings of
S
are paranoid except
[
S
2
S
3
]
, because we can't perform any operations on it, and
[
S
1
S
2
S
3
]
(the entire string).