F. OH NO1 (-2-3-4)
time limit per test4 seconds
memory limit per test512 megabytes
inputstandard input
outputstandard output
You are given an undirected graph with
n
vertices and
3m
edges. The graph may contain multi-edges, but does not contain self-loops.
The graph satisfies the following property: the given edges can be divided into
m
groups of
3
, such that each group is a triangle.
A triangle is defined as three edges
(a,b)
,
(b,c)
and
(c,a)
for some three distinct vertices
a,b,c
(
1≤a,b,c≤n
).
Initially, each vertex
v
has a non-negative integer weight
a
v
. For every edge
(u,v)
in the graph, you should perform the following operation exactly once:
Choose an integer
x
between
1
and
4
. Then increase both
a
u
and
a
v
by
x
.
After performing all operations, the following requirement should be satisfied: if
u
and
v
are connected by an edge, then
a
u
≠
a
v
.
It can be proven this is always possible under the constraints of the task. Output a way to do so, by outputting the choice of
x
for each edge. It is easy to see that the order of operations does not matter. If there are multiple valid answers, output any.
Input
The first line contains a single integer
t
(
1≤t≤
10
5
) — the number of test cases. The description of test cases follows.
The first line of each test case contains two integers
n
and
m
(
3≤n≤
10
6
,
1≤m≤4⋅
10
5
) — denoting the graph have
n
vertices and
3m
edges.
The second line of each test case contains
n
integers
a
1
,
a
2
,…,
a
n
(
0≤
a
i
≤
10
6
) — the initial weights of each vertex.
Then
m
lines follow. The
i
-th line contains three integers
a
i
,
b
i
,
c
i
(
1≤
a
i
<
b
i
<
c
i
≤n
) — denotes that three edges
(
a
i
,
b
i
)
,
(
b
i
,
c
i
)
and
(
c
i
,
a
i
)
.
Note that the graph may contain multi-edges: a pair
(x,y)
may appear in multiple triangles.
It is guaranteed that the sum of
n
over all test cases does not exceed
10
6
and the sum of
m
over all test cases does not exceed
4⋅
10
5
.
Output
For each test case, output
m
lines of
3
integers each.
The
i
-th line should contains three integers
e
ab
,
e
bc
,
e
ca
(
1≤
e
ab
,
e
bc
,
e
ca
≤4
), denoting the choice of value
x
for edges
(
a
i
,
b
i
)
,
(
b
i
,
c
i
)
and
(
c
i
,
a
i
)
respectively.
Example
input
Copy
4
4 1
0 0 0 0
1 2 3
5 2
0 0 0 0 0
1 2 3
1 4 5
4 4
3 4 5 6
1 2 3
1 2 4
1 3 4
2 3 4
5 4
0 1000000 412 412 412
1 2 3
1 4 5
2 4 5
3 4 5
output
Copy
2 1 3
2 3 3
4 3 3
3 1 2
2 2 3
2 3 4
3 1 1
2 3 4
1 2 4
4 4 3
4 1 1
Note
In the first test case, the initial weights are
[0,0,0,0]
. We have added values as follows:
Added
2
to vertices
1
and
2
Added
1
to vertices
2
and
3
Added
3
to vertices
3
and
1
The final weights are
[5,3,4,0]
. The output is valid because
a
1
≠
a
2
,
a
1
≠
a
3
,
a
2
≠
a
3
, and that all chosen values are between
1
and
4
.
In the second test case, the initial weights are
[0,0,0,0,0]
. The weights after the operations are
[12,5,6,7,6]
. The output is valid because
a
1
≠
a
2
,
a
1
≠
a
3
,
a
2
≠
a
3
, and that
a
1
≠
a
4
,
a
1
≠
a
5
,
a
4
≠
a
5
, and that all chosen values are between
1
and
4
.
In the third test case, the initial weights are
[3,4,5,6]
. The weights after the operations are
[19,16,17,20]
, and all final weights are distinct, which means no two adjacent vertices have the same weight.